// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum StatusTypes {
  OPEN
  PENDING
  INPROGRESS
  COMPLETE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  apps                  App[]
  groupUsers            GroupUser[]
  requests              Request[]              @relation("RequestedUser")
  notifications         Notification[]
  requestsMade          Request[]              @relation("RequestingUser")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Notification {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  groupId String  @db.ObjectId
  userId  String  @db.ObjectId
  message String
  title   String
  unread  Boolean @default(true)
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model App {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  userId         String      @db.ObjectId
  packageName    String
  appName        String
  installUrl     String
  googleGroupUrl String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupApps      GroupApps[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  maxMembers      Int            @default(20)
  status          StatusTypes    @default(OPEN)
  startedTestDate DateTime?
  groupUsers      GroupUser[]
  groupApps       GroupApps[]
  notifications   Notification[]
  confirmRequests Request[] // Tracks confirmation requests within the group

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupUser {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  groupId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model GroupApps {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  groupId String @db.ObjectId
  appId   String @db.ObjectId
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  app     App    @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([groupId, appId])
}

model Request {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  groupId       String        @db.ObjectId
  userId        String        @db.ObjectId
  userRequested String        @db.ObjectId
  imageUrl      String?
  status        RequestStatus @default(PENDING)
  user          User          @relation("RequestingUser", fields: [userId], references: [id], onDelete: Cascade)
  group         Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  requestedUser User          @relation("RequestedUser", fields: [userRequested], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
